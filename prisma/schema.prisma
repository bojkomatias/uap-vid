generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Convocatory {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  from      DateTime   @db.Date
  to        DateTime   @db.Date
  year      Int
  name      String
  protocols Protocol[]
}

model Protocol {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime         @db.Date
  researcher    String           @db.ObjectId
  // !Dont we need here researcher be the relation and add researcherId of ID?
  state         State            @default(DRAFT)
  reviews       Review[]
  sections      ProtocolSections
  convocatory   Convocatory      @relation(fields: [convocatoryId], references: [id])
  convocatoryId String           @db.ObjectId
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  lastLogin DateTime? @db.Date
  name      String
  password  String?
  image     String?
  role      Role      @default(RESEARCHER)
  Review    Review[]
}

model Review {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
  type       ReviewType
  data       String
  revised    Boolean       @default(false)
  verdict    ReviewVerdict @default(PENDING)
  reviewerId String        @db.ObjectId
  reviewer   User          @relation(fields: [reviewerId], references: [id])
  protocolId String        @db.ObjectId
  protocol   Protocol      @relation(fields: [protocolId], references: [id])
}

type ProtocolSections {
  bibliography   ProtocolSectionsBibliography
  budget         ProtocolSectionsBudget
  description    ProtocolSectionsDescription
  duration       ProtocolSectionsDuration
  identification ProtocolSectionsIdentification
  introduction   ProtocolSectionsIntroduction
  methodology    ProtocolSectionsMethodology
  publication    ProtocolSectionsPublication
}

type ProtocolSectionsBibliography {
  chart ProtocolSectionsBibliographyChart[]
}

type ProtocolSectionsBibliographyChart {
  author String
  title  String
  year   Int
}

type ProtocolSectionsBudget {
  expenses ProtocolSectionsBudgetExpenses[]
}

type ProtocolSectionsBudgetExpenses {
  amount Float
  detail String
  type   String
  year   String
}

type ProtocolSectionsDescription {
  discipline String
  field      String
  line       String
  technical  String
  objective  String
  type       String
  words      String
}

type ProtocolSectionsDuration {
  chronogram ProtocolSectionsDurationChronogram[]
  duration   String
  modality   String
}

type ProtocolSectionsDurationChronogram {
  semester String
  task     String
}

type ProtocolSectionsIdentification {
  assignment String
  career     String
  sponsor    String[]
  team       ProtocolSectionsIdentificationTeam[]
  title      String
}

type ProtocolSectionsIdentificationTeam {
  hours     Float
  last_name String
  name      String
  role      String
}

type ProtocolSectionsIntroduction {
  justification String
  objectives    String
  problem       String
  state         String
}

type ProtocolSectionsMethodology {
  analysis        String?
  design          String?
  detail          String?
  participants    String?
  place           String?
  type            String
  humanAnimalOrDb Boolean?
  procedures      String?
  instruments     String?
  considerations  String?
}

type ProtocolSectionsPublication {
  title  String
  result String
}

enum ReviewType {
  METHODOLOGICAL
  SCIENTIFIC_INTERNAL
  SCIENTIFIC_EXTERNAL
}

enum ReviewVerdict {
  APPROVED
  REJECTED
  PENDING
}

enum Role {
  RESEARCHER
  SECRETARY
  METHODOLOGIST
  SCIENTIST
  ADMIN
}

enum State {
  NOT_CREATED
  DRAFT
  PUBLISHED
  METHODOLOGICAL_EVALUATION
  SCIENTIFIC_EVALUATION
  ACCEPTED
  ON_GOING
}
