generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AcademicUnit {
  id                          String               @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  shortname                   String
  secretaries                 User[]               @relation(fields: [secretariesIds], references: [id])
  secretariesIds              String[]             @db.ObjectId
  budgets                     AcademicUnitBudget[]
  AcademicUnitAnualBudgets    AnualBudget[]        @relation(fields: [academicUnitAnualBudgetsIds], references: [id])
  academicUnitAnualBudgetsIds String[]             @db.ObjectId
  TeamMembers                 TeamMember[]
}

type AcademicUnitBudget {
  amount Float
  from   DateTime
  to     DateTime?
}

model Convocatory {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  from      DateTime   @db.Date
  to        DateTime   @db.Date
  year      Int
  name      String
  protocols Protocol[]
}

model Logs {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  message    String
  protocol   Protocol @relation(fields: [protocolId], references: [id])
  protocolId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
}

model Protocol {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  protocolNumber String?
  createdAt      DateTime?        @default(now()) @db.Date
  researcherId   String           @db.ObjectId
  researcher     User             @relation(fields: [researcherId], references: [id])
  state          State            @default(DRAFT)
  reviews        Review[]
  sections       ProtocolSections
  convocatory    Convocatory      @relation(fields: [convocatoryId], references: [id])
  convocatoryId  String           @db.ObjectId
  anualBudgets   AnualBudget[]
  anualBudgetIds String[]
  logs           Logs[]
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  email           String         @unique
  lastLogin       DateTime?      @db.Date
  name            String
  password        String?
  image           String?
  role            Role           @default(RESEARCHER)
  Review          Review[]
  AcademicUnits   AcademicUnit[] @relation(fields: [AcademicUnitIds], references: [id])
  AcademicUnitIds String[]       @db.ObjectId
  protocols       Protocol[]
  memberDetails   TeamMember?
  logs            Logs[]
}

model TeamMember {
  id                    String                       @id @default(auto()) @map("_id") @db.ObjectId
  user                  User?                        @relation(fields: [userId], references: [id])
  userId                String?                      @unique @db.ObjectId
  name                  String
  categories            HistoricTeamMemberCategory[]
  AnualBudgetTeamMember AnualBudgetTeamMember[]
  AcademicUnit          AcademicUnit?                @relation(fields: [academicUnitId], references: [id])
  academicUnitId        String?                      @db.ObjectId
}

model HistoricTeamMemberCategory {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  teamMember   TeamMember         @relation(fields: [teamMemberId], references: [id])
  teamMemberId String             @db.ObjectId
  category     TeamMemberCategory @relation(fields: [categoryId], references: [id])
  categoryId   String             @db.ObjectId
  pointsObrero Int?
  from         DateTime
  to           DateTime?
}

model TeamMemberCategory {
  id                         String                       @id @default(auto()) @map("_id") @db.ObjectId
  name                       String                       @unique
  state                      Boolean?
  price                      HistoricCategoryPrice[]
  HistoricTeamMemberCategory HistoricTeamMemberCategory[]
}

type HistoricCategoryPrice {
  from     DateTime
  to       DateTime?
  price    Float
  currency String    @default("ARS")
}

model Review {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())
  type       ReviewType
  questions  ReviewQuestion[]
  revised    Boolean          @default(false)
  verdict    ReviewVerdict    @default(NOT_REVIEWED)
  reviewerId String           @db.ObjectId
  reviewer   User             @relation(fields: [reviewerId], references: [id])
  protocolId String           @db.ObjectId
  protocol   Protocol         @relation(fields: [protocolId], references: [id], onDelete: Cascade)
}

model AnualBudget {
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @default(now())
  state             AnualBudgetState        @default(PENDING)
  budgetItems       AnualBudgetItem[]
  budgetTeamMembers AnualBudgetTeamMember[]
  year              Int
  protocolId        String                  @db.ObjectId
  protocol          Protocol                @relation(fields: [protocolId], references: [id])
  AcademicUnits     AcademicUnit[]          @relation(fields: [academicUnitsIds], references: [id])
  academicUnitsIds  String[]                @db.ObjectId
}

type AnualBudgetItem {
  type       String
  detail     String
  amount     Float
  executions Execution[]
  remaining  Float
}

model AnualBudgetTeamMember {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  teamMemberId   String       @db.ObjectId
  teamMember     TeamMember   @relation(fields: [teamMemberId], references: [id])
  memberRole     String
  hours          Float
  remainingHours Float
  executions     Execution[]
  AnualBudget    AnualBudget? @relation(fields: [anualBudgetId], references: [id])
  anualBudgetId  String?      @db.ObjectId
}

type Execution {
  amount         Float
  date           DateTime
  academicUnitId String
}

type ReviewQuestion {
  id       String
  approved Boolean
  comment  String?
}

type ProtocolSections {
  bibliography   ProtocolSectionsBibliography
  budget         ProtocolSectionsBudget
  description    ProtocolSectionsDescription
  duration       ProtocolSectionsDuration
  identification ProtocolSectionsIdentification
  introduction   ProtocolSectionsIntroduction
  methodology    ProtocolSectionsMethodology
  publication    ProtocolSectionsPublication
}

type ProtocolSectionsBibliography {
  chart ProtocolSectionsBibliographyChart[]
}

type ProtocolSectionsBibliographyChart {
  author String
  title  String
  year   Int
}

type ProtocolSectionsBudget {
  expenses ProtocolSectionsBudgetExpenses[]
}

type ProtocolSectionsBudgetExpenses {
  type String
  data ProtocolSectionsBudgetExpensesData[]
}

type ProtocolSectionsBudgetExpensesData {
  amount Float
  detail String
  year   String
}

type ProtocolSectionsDescription {
  discipline String
  field      String
  line       String
  technical  String
  objective  String
  type       String
  words      String
}

type ProtocolSectionsDuration {
  chronogram ProtocolSectionsDurationChronogram[]
  duration   String
  modality   String
}

type ProtocolSectionsDurationChronogram {
  semester String
  data     ProtocolSectionsDurationChronogramData[]
}

type ProtocolSectionsDurationChronogramData {
  task String
}

type ProtocolSectionsIdentification {
  assignment String
  career     String
  sponsor    String[]
  team       ProtocolSectionsIdentificationTeam[]
  title      String
}

type ProtocolSectionsIdentificationTeam {
  hours        Float
  last_name    String?
  name         String?
  role         String
  teamMemberId String? @db.ObjectId
}

type ProtocolSectionsIntroduction {
  justification String
  objectives    String
  problem       String
  state         String
}

type ProtocolSectionsMethodology {
  analysis        String?
  design          String?
  detail          String?
  participants    String?
  place           String?
  type            String
  humanAnimalOrDb Boolean?
  procedures      String?
  instruments     String?
  considerations  String?
}

type ProtocolSectionsPublication {
  title  String
  result String
}

enum ReviewType {
  METHODOLOGICAL
  SCIENTIFIC_INTERNAL
  SCIENTIFIC_EXTERNAL
  SCIENTIFIC_THIRD
}

enum ReviewVerdict {
  APPROVED
  REJECTED
  APPROVED_WITH_CHANGES
  NOT_REVIEWED
}

enum Role {
  RESEARCHER
  SECRETARY
  METHODOLOGIST
  SCIENTIST
  ADMIN
}

enum State {
  NOT_CREATED
  DRAFT
  PUBLISHED
  METHODOLOGICAL_EVALUATION
  SCIENTIFIC_EVALUATION
  ACCEPTED
  ON_GOING
  DELETED
  DISCONTINUED
  FINISHED
}

enum AnualBudgetState {
  PENDING
  APPROVED
  INTERRUPTED
  REJECTED
}
