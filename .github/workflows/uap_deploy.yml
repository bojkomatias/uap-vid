name: UAP Deploy
on:
    workflow_dispatch:
    push:
        branches: [main]
    pull_request:
        branches: [main]
jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: pnpm/action-setup@v2
              name: Install pnpm
              id: pnpm-install
              with:
                  version: 7
                  run_install: false

            - name: Get pnpm store directory
              id: pnpm-cache
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install
            - run: pnpm lint
    build:
        needs: [lint]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: pnpm/action-setup@v2
              name: Install pnpm
              id: pnpm-install
              with:
                  version: 7
                  run_install: false

            - name: Get pnpm store directory
              id: pnpm-cache
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install

            - name: Prisma generate
              run: npx prisma generate

            - name: Build
              run: pnpm build
    deploy:
        needs: [lint, build]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: '18'
            - run: pnpm install
            # Deploy to uap by ssh
            - name: Install SSH Client
              run: sudo apt-get install -y sshpass

            - name: Deploy via SSH
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USERNAME }}
                  password: ${{ secrets.SSH_PASSWORD }}
                  port: ${{ secrets.SSH_PORT }}
                  script: |
                      sshpass -p ${{ secrets.SSH_PASSWORD }} 
                      ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} 

                      # Delete old code
                      rm -rf uap-vid

                      # clone latest code
                      git clone https://github.com/bojkomatias/uap-vid.git

                      # go to uap-vid folder
                      cd uap-vid

                      # build docker image
                      docker build -t uap:latest .

                      # docker compose down
                      docker-compose down

                      # docker compose up with name uap 
                      docker-compose up -d --name uap
